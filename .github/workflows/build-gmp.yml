name: Build GMP

on:
  workflow_call:
    inputs:
      os:
        description: 'Operating System'
        required: true
        type: string
      arch:
        description: 'Architecture'
        required: true
        type: string
      gmp_version:
        description: 'GMP version'
        required: true
        type: string

  workflow_dispatch:
    inputs:
      os:
        description: 'Operating System'
        required: true
        default: linux
      arch:
        description: 'Architecture'
        required: true
        default: x64
      gmp_version:
        description: 'GMP version'
        required: true
        default: 6.3.0

jobs:
  build:
    runs-on: ${{ (inputs.os == 'osx' || inputs.os == 'ios') && (inputs.arch == 'x64' && 'macos-13' || 'macos-latest') || 'ubuntu-latest' }}
    env:
      GMP_VERSION: ${{ inputs.gmp_version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: Set environment variables
        run: |
          echo "TARGET=${{ inputs.os }}-${{ inputs.arch }}" >> $GITHUB_ENV
          case "${{ inputs.os }}-${{ inputs.arch }}" in
            "linux-x64")
              echo "HOST=x86_64-pc-linux-gnu" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so.10.5.0" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so.4.7.0" >> $GITHUB_ENV
              echo "STRIP=strip --strip-unneeded" >> $GITHUB_ENV
              echo "TEST_CC=gcc" >> $GITHUB_ENV
              ;;
            "linux-x86")
              echo "HOST=i686-pc-linux-gnu" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so.10.5.0" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so.4.7.0" >> $GITHUB_ENV
              echo "STRIP=strip --strip-unneeded" >> $GITHUB_ENV
              echo "TEST_CC=gcc -m32" >> $GITHUB_ENV
              ;;
            "linux-arm64")
              echo "HOST=aarch64-linux-gnu" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so.10.5.0" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so.4.7.0" >> $GITHUB_ENV
              echo "STRIP=aarch64-linux-gnu-strip --strip-unneeded" >> $GITHUB_ENV
              echo "TEST_CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              ;;
            "linux-arm")
              echo "HOST=arm-linux-gnueabihf" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so.10.5.0" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so.4.7.0" >> $GITHUB_ENV
              echo "STRIP=arm-linux-gnueabihf-strip --strip-unneeded" >> $GITHUB_ENV
              echo "TEST_CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
              ;;
            "linux-musl-x64")
              echo "HOST=x86_64-linux-musl" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so.10.5.0" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so.4.7.0" >> $GITHUB_ENV
              echo "STRIP=strip --strip-unneeded" >> $GITHUB_ENV
              echo "TEST_CC=musl-gcc" >> $GITHUB_ENV
              ;;
            "linux-musl-arm64")
              echo "HOST=aarch64-unknown-linux-musl" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so.10.5.0" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so.4.7.0" >> $GITHUB_ENV
              echo "STRIP=aarch64-unknown-linux-musl-strip --strip-unneeded" >> $GITHUB_ENV
              echo "TEST_CC=aarch64-unknown-linux-musl-gcc" >> $GITHUB_ENV
              ;;
            "win-x64")
              echo "HOST=x86_64-w64-mingw32" >> $GITHUB_ENV
              echo "GMP_SO=libgmp-10.dll" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx-4.dll" >> $GITHUB_ENV
              echo "STRIP=x86_64-w64-mingw32-strip --strip-unneeded" >> $GITHUB_ENV
              echo "TEST_CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
              ;;
            "win-x86")
              echo "HOST=i686-w64-mingw32" >> $GITHUB_ENV
              echo "GMP_SO=libgmp-10.dll" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx-4.dll" >> $GITHUB_ENV
              echo "STRIP=i686-w64-mingw32-strip --strip-unneeded" >> $GITHUB_ENV
              echo "TEST_CC=i686-w64-mingw32-gcc" >> $GITHUB_ENV
              ;;
            "android-x64")
              echo "HOST=x86_64-linux-android" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so" >> $GITHUB_ENV
              echo "STRIP=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip --strip-unneeded" >> $GITHUB_ENV
              ARGS="--target=x86_64-linux-android21 \
                --sysroot=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
                -fPIE -pie"
              echo "TEST_CC=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang ${ARGS}" >> $GITHUB_ENV
              echo "CC=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang ${ARGS}" >> $GITHUB_ENV
              echo "CXX=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ ${ARGS}" >> $GITHUB_ENV
              ;;
            "android-arm64")
              echo "HOST=aarch64-linux-android" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so" >> $GITHUB_ENV
              echo "STRIP=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip --strip-unneeded" >> $GITHUB_ENV
              ARGS="--target=aarch64-linux-android21 \
                --sysroot=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
                -fPIE -pie"
              echo "TEST_CC=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang ${ARGS}" >> $GITHUB_ENV
              echo "CC=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang ${ARGS}" >> $GITHUB_ENV
              echo "CXX=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ ${ARGS}" >> $GITHUB_ENV
              ;;
            "android-x86")
              echo "HOST=i686-linux-android" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so" >> $GITHUB_ENV
              echo "STRIP=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip --strip-unneeded" >> $GITHUB_ENV
              ARGS="--target=i686-linux-android21 \
                --sysroot=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
                -fPIE -pie"
              echo "TEST_CC=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang ${ARGS}" >> $GITHUB_ENV
              echo "CC=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang ${ARGS}" >> $GITHUB_ENV
              echo "CXX=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ ${ARGS}" >> $GITHUB_ENV
              ;;
            "android-arm")
              echo "HOST=armv7a-linux-android" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.so" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.so" >> $GITHUB_ENV
              echo "STRIP=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip --strip-unneeded" >> $GITHUB_ENV
              ARGS="--target=armv7a-linux-android21 \
                --sysroot=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
                -fPIE -pie"
              echo "TEST_CC=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang ${ARGS}" >> $GITHUB_ENV
              echo "CC=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang ${ARGS}" >> $GITHUB_ENV
              echo "CXX=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ ${ARGS}" >> $GITHUB_ENV
              ;;
            "osx-arm64")
              echo "HOST=aarch64-apple-darwin" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.dylib" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.dylib" >> $GITHUB_ENV
              echo "STRIP=strip -x" >> $GITHUB_ENV
              echo "TEST_CC=clang -arch arm64" >> $GITHUB_ENV
              ;;
            "osx-x64")
              echo "HOST=x86_64-apple-darwin" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.dylib" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.dylib" >> $GITHUB_ENV
              echo "STRIP=strip -x" >> $GITHUB_ENV
              echo "TEST_CC=clang" >> $GITHUB_ENV
              echo "LDFLAGS=-ld_classic" >> $GITHUB_ENV # fixed: ld: branch8 out of range 362869 in ___gmpn_add_nc_x86_64
              ;;
            "ios-arm64")
              echo "HOST=aarch64-apple-ios" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.a" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.a" >> $GITHUB_ENV
              echo "STRIP=strip -x" >> $GITHUB_ENV
              echo "CFLAGS=-arch arm64 -isysroot $(xcrun --sdk iphoneos --show-sdk-path) -miphoneos-version-min=12.0" >> $GITHUB_ENV
              echo "LDFLAGS=-arch arm64 -isysroot $(xcrun --sdk iphoneos --show-sdk-path) -miphoneos-version-min=12.0" >> $GITHUB_ENV
              echo "TEST_CC=xcrun -sdk iphoneos clang -arch arm64 -isysroot \$(xcrun --sdk iphoneos --show-sdk-path)" >> $GITHUB_ENV
              ;;
            "browser-wasm")
              echo "HOST=none" >> $GITHUB_ENV
              echo "GMP_SO=libgmp.a" >> $GITHUB_ENV
              echo "GMP_CPP_SO=libgmpxx.a" >> $GITHUB_ENV
              echo "STRIP=strip" >> $GITHUB_ENV
              echo "TEST_CC=emcc" >> $GITHUB_ENV
              ;;
            *)
              echo "Error: Unsupported OS-Architecture combination: ${{ inputs.os }}-${{ inputs.arch }}"
              exit 1
              ;;
          esac

      - name: Install Toolchain (arch-specific)
        run: |
          case "$TARGET" in
            "linux-x64")
              ;;
            "linux-x86")
              sudo apt-get update
              sudo apt-get install -y gcc-multilib g++-multilib
              ;;
            "linux-arm64")
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends qemu-user gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              ;;
            "linux-arm")
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends qemu-user gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
              ;;
            "linux-musl-x64")
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends musl-tools
              ;;
            "linux-musl-arm64")
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends musl-tools qemu-user
              sudo mkdir -p /opt/x-tools
              wget -nv https://github.com/musl-cross/musl-cross/releases/download/20241103/aarch64-unknown-linux-musl.tar.xz
              sudo tar -xf aarch64-unknown-linux-musl.tar.xz -C /opt/x-tools
              ls -l /opt/x-tools/aarch64-unknown-linux-musl/bin/
              /opt/x-tools/aarch64-unknown-linux-musl/bin/aarch64-unknown-linux-musl-gcc --version
              echo "/opt/x-tools/aarch64-unknown-linux-musl/bin" >> $GITHUB_PATH
              ;;
            "win-x86")
              sudo dpkg --add-architecture i386
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends mingw-w64
              sudo apt-get install -y wine32:i386
              ;;
            "win-x64")
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends mingw-w64 wine
              ;;
            "android-x64" | "android-arm64" | "android-x86" | "android-arm")
              ;;
            "osx-arm64" | "osx-x64" | "ios-arm64")
              echo "No toolchain installation needed on macOS/iOS."
              ;;
            "browser-wasm")
              git clone --depth 1 https://github.com/emscripten-core/emsdk.git
              cd emsdk
              ./emsdk install latest
              ./emsdk activate latest
              echo "${{ github.workspace }}/emsdk" >> $GITHUB_PATH
              echo "${{ github.workspace }}/emsdk/upstream/emscripten" >> $GITHUB_PATH
              ;;
            *)
              echo "Error: Unsupported OS-Architecture combination: $TARGET"
              exit 1
              ;;
          esac

      - name: Download GMP Source
        run: |
          wget -nv https://mirrors.nju.edu.cn/gnu/gmp/gmp-${GMP_VERSION}.tar.xz
          tar -xf gmp-${GMP_VERSION}.tar.xz

      - name: Configure GMP
        run: |
          cd gmp-${GMP_VERSION}
          
          case "$TARGET" in
            "ios-arm64")
              ./configure --enable-static --disable-shared --enable-cxx --disable-assembly --host=${HOST}
              ;;
            "browser-wasm")
              emconfigure ./configure --enable-static --disable-shared --enable-cxx --disable-assembly --host=${HOST}
              ;;
            *)
              ./configure --enable-shared --disable-static --enable-fat --enable-cxx --host=${HOST}
              ;;
          esac

      - name: Build GMP
        run: |
          cd gmp-${GMP_VERSION}
          make -j4

      - name: Check .libs
        run: |
          cd gmp-${GMP_VERSION}/.libs
          ls -l
          file ${GMP_SO}

      - name: Generate .lib files (Windows only)
        if: ${{ inputs.os == 'win' }}
        run: |
          cd gmp-${GMP_VERSION}/.libs
          
          if [ "$TARGET" = "win-x86" ]; then
            HOST_PREFIX=i686-w64-mingw32
          elif [ "$TARGET" = "win-x64" ]; then
            HOST_PREFIX=x86_64-w64-mingw32
          else
            echo "Error: Unsupported OS-Architecture combination: $TARGET"
            exit 1
          fi
                
          ${HOST_PREFIX}-dlltool \
            --input-def  libgmp-3.dll.def \
            --output-lib libgmp-10.lib \
            --dllname    ${GMP_SO}
                  
          ${HOST_PREFIX}-dlltool \
            --input-def  libgmpxx-3.dll.def \
            --output-lib libgmpxx-4.lib \
            --dllname    ${GMP_CPP_SO}
          
          echo "Converted .def files to .lib for Windows."

      - name: Dump lib dependencies
        if: ${{ inputs.os != 'win' && inputs.os != 'browser' }}
        run: |
          cd gmp-${GMP_VERSION}/.libs
          case "$TARGET" in
            osx-*)
              otool -L ${GMP_SO}
              ;;
            ios-*)
              ar -t ${GMP_SO}
              ;;
            linux-* | android-*)
              objdump -x ${GMP_SO} | grep NEEDED
              ;;
            *)
              echo "Error: Unsupported OS-Architecture combination: $TARGET"
              exit 1
              ;;
          esac

      - name: Strip GMP Library
        run: |
          cd gmp-${GMP_VERSION}/.libs
          ${STRIP} ${GMP_SO}
          ${STRIP} ${GMP_CPP_SO}
          ls -l
          file ${GMP_SO}

      - name: Compile Test C Program
        run: |
          ${{ env.TEST_CC }} -o factorial_gmp.exe \
            .github/workflows/factorial_gmp.c \
            -I${{ github.workspace }}/gmp-${GMP_VERSION} \
            -L${{ github.workspace }}/gmp-${GMP_VERSION}/.libs \
            -lgmp
          ls -l
          file factorial_gmp.exe

      - name: Run Test C Program
        if: ${{ inputs.os != 'android' && inputs.os != 'ios' && !(inputs.os == 'linux-musl' && inputs.arch == 'arm64') }}
        run: |
          case "$TARGET" in
            win-*)
              cp ${{ github.workspace }}/gmp-${GMP_VERSION}/.libs/${GMP_SO} .
              wine ${GITHUB_WORKSPACE}/factorial_gmp.exe
              ;;
            "linux-x64" | "linux-x86")
              LD_LIBRARY_PATH=${{ github.workspace }}/gmp-${GMP_VERSION}/.libs ./factorial_gmp.exe
              ;;
            "linux-arm64")
              LD_LIBRARY_PATH=${{ github.workspace }}/gmp-${GMP_VERSION}/.libs qemu-aarch64 -L /usr/aarch64-linux-gnu/ ./factorial_gmp.exe
              ;;
            "linux-arm")
              LD_LIBRARY_PATH=${{ github.workspace }}/gmp-${GMP_VERSION}/.libs qemu-arm -L /usr/arm-linux-gnueabihf/ ./factorial_gmp.exe
              ;;
            "linux-musl-x64")
              LD_LIBRARY_PATH=${{ github.workspace }}/gmp-${GMP_VERSION}/.libs ./factorial_gmp.exe
              ;;
            osx-*)
              DYLD_LIBRARY_PATH=${{ github.workspace }}/gmp-${GMP_VERSION}/.libs ./factorial_gmp.exe
              ;;
            browser-wasm)
              node ./factorial_gmp.exe
              ;;
            *)
              echo "Error: Unsupported OS-Architecture combination: $TARGET"
              exit 1
              ;;
          esac

      - name: Prepare Artifact folder
        run: |
          mkdir -p artifacts/bin artifacts/include artifacts/misc artifacts/test
          cp gmp-${GMP_VERSION}/gmp.h ./artifacts/include
          cp gmp-${GMP_VERSION}/gmpxx.h ./artifacts/include
          cp gmp-${GMP_VERSION}/.libs/${GMP_SO} ./artifacts/bin
          cp gmp-${GMP_VERSION}/.libs/${GMP_CPP_SO} ./artifacts/bin
          cp gmp-${GMP_VERSION}/.libs/*.lib ./artifacts/misc || true
          cp gmp-${GMP_VERSION}/.libs/*.def ./artifacts/misc || true
          cp gmp-${GMP_VERSION}/.libs/*.lai ./artifacts/misc
          cp factorial_gmp.* ./artifacts/test

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gmp-${{ inputs.os }}-${{ inputs.arch }}
          path: artifacts